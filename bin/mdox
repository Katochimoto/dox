#!/usr/bin/env node

var program = require('commander');
var pkg = require('../package');
var util = require('util');
var mdox = require('..');

program
    .version(pkg.version)
    .option('-h, --html', 'output "raw" comments, leaving the markdown intact')
    .option('-d, --debug', 'output parsed comments for debugging')
    .option('-m, --md', 'output markdown documentation')
    .option('-c, --doc', 'generate all documentation')
    .option('-C, --chdir <path>', 'generate all documentation');

program
    .action(function(cmd, options) {

        console.log(cmd, options);

    })
.on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    # stdin');
    console.log('    $ mdox > myfile.json');
    console.log('');
    console.log('    # operates over stdio');
    console.log('    $ mdox < myfile.js > myfile.json');
    console.log('');
});


/*
program.on('--doc', function() {
    console.log(program.chdir);
    console.log('');
});

program.parse(process.argv);

var buf = '';
process.stdin.setEncoding('utf8');
process.stdin.on('data', function(chunk) {
    buf += chunk;
});

process.stdin.on('end', function() {
    if (program.html) {
        process.stdout.write(mdox.htmlGenerate(buf));

    } else if (program.md) {
        process.stdout.write(mdox.mdGenerate(buf));

    } else {
        var data = mdox.jsonGenerate(buf);

        if (program.debug) {
            process.stdout.write(util.inspect(data, {
                showHidden: false,
                depth: Infinity,
                colors: true
            }) + '\n');

        } else {
            process.stdout.write(JSON.stringify(data, null, 4));
        }
    }

}).resume();
    */