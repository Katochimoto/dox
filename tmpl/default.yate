module "default"
import "mdox"

match / {

    apply .comments[
        !(.ignore) &&
        .tags.type != 'ignore' &&
        (.tags.type == 'file' || .tags.type == 'overview' || .tags.type == 'fileoverview')
    ] item-comment

    apply .comments[
        !(.ignore) &&
        .tags.type != 'ignore' &&
        .tags.type == 'global'
    ] item-comment

    apply .comments[
        !(.ignore) &&
        .tags.type != 'ignore' &&
        .tags.type != 'global' &&
        .tags.type != 'file' &&
        .tags.type != 'overview' &&
        .tags.type != 'fileoverview'
    ] item-comment

    "\n\n[TOC]\n\n"
}

/**
 * File description
 */
match .comments[
    .tags.type == 'file' ||
    .tags.type == 'overview' ||
    .tags.type == 'fileoverview'
] item-comment {

    name = (
        " "
        if (.tags[.type == 'file'].description) {
            .tags[.type == 'file'].description

        } else if (.tags[.type == 'overview'].description) {
            .tags[.type == 'overview'].description

        } else if (.tags[.type == 'fileoverview'].description) {
            .tags[.type == 'fileoverview'].description

        } else {
            "Undefined"
        }
    )

    description = (
        apply .tags[.type == 'desc'] item-tag
        "\n\n"
        apply .tags[.type == 'description'] item-tag
        "\n\n"
        .description.full
    )

    "#"
    name

    apply .tags[.type == 'version'] item-tag

    "\n\n"
    apply .tags[.type == 'author'] item-tag

    "\n\n"
    apply .tags[.type == 'copyright'] item-tag


    "\n\n"

    mdox-string-trim(description)

    "\n\n"
}


/**
 * Function description
 */
match .comments[
    .tags.type == 'method' ||
    .tags.type == 'function' ||
    .tags.type == 'func' ||
    .tags.type == 'callback' ||
    .tags.type == 'constructs' ||
    .ctx.type == 'method' ||
    .ctx.type == 'function'
] item-comment {

    is-deprecated = boolean(.tags[.type == 'deprecated'])

    context = (
        if (.tags[.type == 'memberof'].parent) {
            .tags[.type == 'memberof'].parent

        } else if (.tags[.type == 'memberOf'].parent) {
            .tags[.type == 'memberOf'].parent

        } else if (.ctx[.type == 'method'].cons) {
            .ctx[.type == 'method'].cons

        } else if (.ctx[.type == 'method'].receiver) {
            .ctx[.type == 'method'].receiver

        } else {
            ""
        }
    )

    context-sep = (
        if (!mdox-string-empty(context)) {
            " *"
            context
            if (.tags[.type == 'static']) {
                ":"
            } else {
                "."
            }
            "*"
        } else {
            ""
        }
    )

    name = (
        " **"
        if (is-deprecated) {
            "~~"
        }

        if (.tags[.type == 'constructs'].name) {
            .tags[.type == 'constructs'].name

        } else if (.tags[.type == 'callback'].name) {
            .tags[.type == 'callback'].name

        } else if (.tags[.type == 'func'].name) {
            .tags[.type == 'func'].name

        } else if (.tags[.type == 'function'].name) {
            .tags[.type == 'function'].name

        } else if (.tags[.type == 'method'].name) {
            .tags[.type == 'method'].name

        } else if (.tags[.type == 'name'].name) {
            .tags[.type == 'name'].name

        } else if (.ctx[.type == 'method'].name) {
            .ctx[.type == 'method'].name

        } else if (.ctx[.type == 'function'].name) {
            .ctx[.type == 'function'].name

        }

        if (is-deprecated) {
            "~~"
        }
        "**"
    )

    types = (
        apply . mdox-tag-types ([
            'return'
            'returns'
        ])
    )

    description = (
        apply .tags[.type == 'summary'] item-tag
        if (.tags[.type == 'desc']) {
            "\n\n"
            apply .tags[.type == 'desc'] item-tag
        }
        if (.tags[.type == 'description']) {
            "\n\n"
            apply .tags[.type == 'description'] item-tag
        }
        if (.description.full) {
            "\n\n"
            .description.full
        }
    )

    args = (
        for (.tags[.type == 'param' || .type == 'arg' || .type == 'argument']) {
            if (index() != 0) {
                ", "
            }
            apply . mdox-tag-types-str
            " "
            .name
        }
    )

    throws-description = (
        for (.tags[.type == 'throws' || .type == 'exception']) {
            if (index() != 0) {
                "\n\n"
            }

            html(">")
            " - "

            apply . mdox-tag-types-str

            if (.description) {
                " : "
                .description
            }
        }
    )

    args-description = (
        for (.tags[.type == 'param' || .type == 'arg' || .type == 'argument']) {
            if (index() != 0) {
                "\n\n"
            }

            html(">")
            " - "

            .name

            " "
            apply . mdox-tag-types-str

            if (.description) {
                " : "
                .description
            }
        }
    )

    return-description = (
        for (.tags[.type == 'return' || .type == 'returns']) {
            if (index() != 0) {
                "\n\n"
            }

            html(">")
            " - "

            apply . mdox-tag-types-str

            if (.description) {
                " : "
                .description
            }
        }
    )

    fires-description = (
        for (.tags[.type == 'fires' || .type == 'emits']) {
            if (index() != 0) {
                "\n\n"
            }

            html(">")
            " - "

            .description
        }
    )



    example = (
        for (.tags[.type == 'example']) {
            if (index() != 0) {
                "\n\n"
            }
            .title
            "\n"
            "```\n"
            .description
            "\n```"
        }
    )


    access = (
        if (.tags[.type == 'access'].access) {
            .tags[.type == 'access'].access

        } else if (.tags[.type == 'private']) {
            "private"

        } else if (.tags[.type == 'protected']) {
            "protected"

        } else if (.tags[.type == 'public']) {
            "public"
        }
    )

    alias = (
        if (.tags[.type == 'alias'].name) {
            .tags[.type == 'alias'].name
        }
    )



    "####"
    context-sep
    name

    " ("

    args

    ")"

    " "
    types

    "\n\n"

    mdox-string-trim(description)


    if (!mdox-string-empty(access)) {
        "\n\n"
        html(">")
        " *Access:* "
        "`"
        access
        "`"
    }

    if (!mdox-string-empty(alias)) {
        "\n\n"
        html(">")
        " *Alias:* "
        "`"
        alias
        "`"
    }

    if (!mdox-string-empty(args-description)) {
        "\n\n"
        html(">")
        " *Arguments:*"
        "\n\n"
        args-description
    }

    if (!mdox-string-empty(return-description)) {
        "\n\n"
        html(">")
        " *Returns:*"
        "\n\n"
        return-description
    }

    if (!mdox-string-empty(throws-description)) {
        "\n\n"
        html(">")
        " *Exceptions:*"
        "\n\n"
        throws-description
    }

    if (!mdox-string-empty(fires-description)) {
        "\n\n"
        html(">")
        " *Fires:*"
        "\n\n"
        fires-description
    }


    if (!mdox-string-empty(example)) {
        "\n\n"
        "##### **Example**"
        "\n\n"
        example
    }



    "\n\n"

        // this

}


/**
 * Class description
 */
match .comments[
    .tags.type == 'class' ||
    .tags.type == 'classdesc' ||
    .tags.type == 'constructor' ||
    .tags.type == 'namespace' ||
    .tags.type == 'mixin' ||
    .tags.type == 'lends'
] item-comment {

    is-deprecated = boolean(.tags[.type == 'deprecated'])

    name = (
        " *"
        if (is-deprecated) {
            "~~"
        }

        if (.tags[.type == 'class'].name) {
            .tags[.type == 'class'].name

        } else if (.tags[.type == 'constructor'].name) {
            .tags[.type == 'constructor'].name

        } else if (.tags[.type == 'namespace'].name) {
            .tags[.type == 'namespace'].name

        } else if (.tags[.type == 'mixin'].name) {
            .tags[.type == 'mixin'].name

        } else if (.tags[.type == 'name'].name) {
            .tags[.type == 'name'].name

        } else if (.ctx[.type == 'function'].name) {
            .ctx[.type == 'function'].name

        } else {
            "Undefined"
        }

        if (is-deprecated) {
            "~~"
        }
        "*"
    )

    types = (
        apply . mdox-tag-types ([
            'class'
            'constructor'
            'namespace'
        ])
    )

    description = (
        apply .tags[.type == 'summary'] item-tag
        if (.tags[.type == 'classdesc']) {
            "\n\n"
            apply .tags[.type == 'classdesc'] item-tag
        }
        if (.tags[.type == 'desc']) {
            "\n\n"
            apply .tags[.type == 'desc'] item-tag
        }
        if (.tags[.type == 'description']) {
            "\n\n"
            apply .tags[.type == 'description'] item-tag
        }
        if (.description.full) {
            "\n\n"
            .description.full
        }
    )

    example = (
        for (.tags[.type == 'example']) {
            if (index() != 0) {
                "\n\n"
            }
            .title
            "\n"
            "```\n"
            .description
            "\n```"
        }
    )



    "###"
    name

    " "
    types



    "\n\n"

    mdox-string-trim(description)

    if (!mdox-string-empty(example)) {
        "\n\n"
        "##### **Example**"
        "\n\n"
        example
    }

    "\n\n"

    // augments
    // extends
    // mixes
}


/**
 * Module description
 */
match .comments[
    .tags.type == 'module'
] item-comment {

    is-deprecated = boolean(.tags[.type == 'deprecated'])

    types = (
        apply . mdox-tag-types ([
            'module'
        ])
    )

    name = (
        " "
        if (is-deprecated) {
            "~~"
        }

        .tags[.type == 'module'].name

        if (is-deprecated) {
            "~~"
        }
    )

    description = (
        apply .tags[.type == 'desc'] item-tag
        "\n\n"
        apply .tags[.type == 'description'] item-tag
        "\n\n"
        .description.full
    )

    example = (
        for (.tags[.type == 'example']) {
            if (index() != 0) {
                "\n\n"
            }
            .title
            "\n"
            "```\n"
            .description
            "\n```"
        }
    )



    "##"
    name

    " "
    types



    "\n\n"

    mdox-string-trim(description)

    if (!mdox-string-empty(example)) {
        "\n\n"
        "##### **Example**"
        "\n\n"
        example
    }

    "\n\n"
}


        // event
        // instance
        // property
        // enum
        // member
        // readonly
        // typedef
        // http://usejsdoc.org/tags-kind.html

