module "default"
import "mdox"

match / {

    apply .comments[!(.ignore)] item-comment

}

/**
 * File description
 */
match .comments[
    .tags.type == 'file' ||
    .tags.type == 'overview' ||
    .tags.type == 'fileoverview'
] item-comment {

    name = (
        " "
        if (.tags[.type == 'file'].description) {
            .tags[.type == 'file'].description

        } else if (.tags[.type == 'overview'].description) {
            .tags[.type == 'overview'].description

        } else if (.tags[.type == 'fileoverview'].description) {
            .tags[.type == 'fileoverview'].description

        } else {
            "Undefined"
        }
    )

    description = (
        apply .tags[.type == 'desc'] item-tag
        "\n\n"
        apply .tags[.type == 'description'] item-tag
        "\n\n"
        .description.full
    )

    "#"
    name

    apply .tags[.type == 'version'] item-tag

    "\n\n"
    apply .tags[.type == 'author'] item-tag

    "\n\n"
    apply .tags[.type == 'copyright'] item-tag


    "\n\n"

    mdox-string-trim(description)

    "\n\n"
}


/**
 * Function description
 */
match .comments[
    .tags.type == 'method' ||
    .tags.type == 'function' ||
    .tags.type == 'func' ||
    .tags.type == 'callback' ||
    .tags.type == 'constructs' ||
    .ctx.type == 'method' ||
    .ctx.type == 'function'
] item-comment {

    context = (
        if (.ctx[.type == 'method'].cons) {
            .ctx[.type == 'method'].cons
        } else if (.ctx[.type == 'method'].receiver) {
            .ctx[.type == 'method'].receiver
        } else {
            ""
        }
    )

    contextSep = (
        if (!mdox-string-empty(context)) {
            " *"
            context
            if (.tags[.type == 'static']) {
                ":"
            } else {
                "."
            }
            "*"
        } else {
            ""
        }
    )

    name = (
        " **"
        if (.tags[.type == 'name'].name) {
            .tags[.type == 'name'].name

        } else if (.ctx[.type == 'method'].name) {
            .ctx[.type == 'method'].name

        } else if (.ctx[.type == 'function'].name) {
            .ctx[.type == 'function'].name

        }
        "**"
    )

    returnTypes = (
        apply . mdox-tag-types ('return')
        apply . mdox-tag-types ('returns')
    )

    description = (
        apply .tags[.type == 'desc'] item-tag
        "\n\n"
        apply .tags[.type == 'description'] item-tag
        "\n\n"
        .description.full
    )





    "####"
    contextSep
    name

    " ("

    ")"

    if (!mdox-string-empty(returnTypes)) {
        " `"
        returnTypes
        "`"
    }

    "\n\n"

    mdox-string-trim(description)

    "\n\n"

        // name
        // alias
        // deprecated
        // example
        // emits
        // fires
        // global
        // ignore
        // param
        // arg
        // argument
        // private
        // protected
        // public
        // access
        // returns
        // static
        // memberof
        // memberOf
        // summary
        // this
        // throws

}


/**
 * Class description
 */
match .comments[
    .tags.type == 'class' ||
    .tags.type == 'classdesc' ||
    .tags.type == 'constructor' ||
    .tags.type == 'namespace' ||
    .tags.type == 'mixin' ||
    .tags.type == 'lends'
] item-comment {

    name = (
        " *"
        if (.tags[.type == 'class'].name) {
            .tags[.type == 'class'].name

        } else if (.tags[.type == 'constructor'].name) {
            .tags[.type == 'constructor'].name

        } else if (.tags[.type == 'namespace'].name) {
            .tags[.type == 'namespace'].name

        } else if (.tags[.type == 'mixin'].name) {
            .tags[.type == 'mixin'].name

        } else if (.ctx[.type == 'function'].name) {
            .ctx[.type == 'function'].name

        } else {
            "Undefined"
        }
        "*"
    )

    types = (
        apply . mdox-tag-types ('class')
        apply . mdox-tag-types ('constructor')
        apply . mdox-tag-types ('namespace')
    )

    description = (
        apply .tags[.type == 'classdesc'] item-tag
        "\n\n"
        apply .tags[.type == 'desc'] item-tag
        "\n\n"
        apply .tags[.type == 'description'] item-tag
        "\n\n"
        .description.full
    )



    "###"
    name

    if (!mdox-string-empty(types)) {
        " `"
        types
        "`"
    }



    "\n\n"

    mdox-string-trim(description)

    "\n\n"

    // augments
    // extends
    // mixes
    // name
    // deprecated
    // example
    // global
    // summary
}


/**
 * Module description
 */
match .comments[
    .tags.type == 'module'
] item-comment {

    types = (
        apply . mdox-tag-types ('module')
    )

    name = (
        " "
        .tags[.type == 'module'].name
    )

    description = (
        apply .tags[.type == 'desc'] item-tag
        "\n\n"
        apply .tags[.type == 'description'] item-tag
        "\n\n"
        .description.full
    )



    "##"
    name

    if (!mdox-string-empty(types)) {
        " `"
        types
        "`"
    }



    "\n\n"

    mdox-string-trim(description)

    "\n\n"

    // example
}


        // event
        // instance
        // property
        // enum
        // member
        // readonly
        // typedef
        // http://usejsdoc.org/tags-kind.html

