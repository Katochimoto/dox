module "default"
import "mdox"

match / {

    apply .comments[
        !(.ignore) &&
        .tags.type != 'ignore' &&
        .matchCtx.type == 'file'
    ] item-comment

    apply .comments[
        !(.ignore) &&
        .tags.type != 'ignore' &&
        .tags.type == 'global'
    ] item-comment

    apply .comments[
        !(.ignore) &&
        .tags.type != 'ignore' &&
        .tags.type != 'global' &&
        .matchCtx.type != 'file'
    ] item-comment

    "\n\n[TOC]\n\n"
}

match .comments[!(.matchCtx.type)] item-comment {
    apply . description
    "\n\n"
}

/**
 * File description
 */
match .comments[.matchCtx.type == 'file'] item-comment {

    "# "
    if (.matchCtx.name) {
        .matchCtx.name

    } else {
        "Undefined"
    }

    "\n\n"

    apply . access

    apply . tags-flags([
        'deprecated'
    ])

    if (.tags[.type == 'version'].description) {
        "`Version: {.tags[.type == 'version'].description}` "
    }

    if (.tags[.type == 'author'].description) {
        "`Author: {.tags[.type == 'author'].description}` "
    }

    "\n\n"

    if (.tags[.type == 'copyright'].description) {
        "&copy; "
        .tags[.type == 'copyright'].description
        "\n\n"
    }

    apply . description

    apply . example

    "\n\n"
}


/**
 * Property description
 */
match .comments[.matchCtx.type == 'prop'] item-comment {

    context = (
        if (.matchCtx.context) {
            .matchCtx.context
        } else {
            ""
        }
    )

    context-sep = (
        if (!mdox-string-empty(context)) {
            " *"
            context
            if (.tags[.type == 'static']) {
                ":"
            } else {
                "."
            }
            "*"
        } else {
            ""
        }
    )

    name-type = (
        if (.tags[.type == 'constant' || .kind == 'constant']) {
            "Constant"

        } else if (.tags[.type == 'const']) {
            "Constant"

        } else if (.tags[.type == 'member' || .kind == 'member']) {
            "Var"

        } else if (.tags[.type == 'var']) {
            "Var"

        } else if (.tags[.type == 'enum']) {
            "Enum"

        } else if (.ctx[.type == 'property']) {
            "Property"

        } else if (.ctx[.type == 'declaration']) {
            "Var"

        } else {
            ""
        }
    )

    name = (
        if (.matchCtx.name) {
            .matchCtx.name

        } else {
            "Undefined"
        }
    )

    name-context = (
        " **{name}**"
    )

    types = (
        apply . mdox-tag-types ([
            'type'
            'constant'
            'const'
            'member'
            'var'
            'enum'
        ])
    )



    value = (
        if (.ctx[.type == 'property'].value) {
            .ctx[.type == 'property'].value

        } else if (.ctx[.type == 'declaration'].value) {
            .ctx[.type == 'declaration'].value

        } else {
            ""
        }
    )

    "#### "
    if (.tags[.type == 'title'].description) {
        .tags[.type == 'title'].description

    } else {
        if (!mdox-string-empty(name-type)) {
            name-type
            ": "
        }
        name
    }

    "\n\n"

    context-sep
    name-context
    " "
    types

    if (!mdox-string-empty(value)) {
        " = "
        "``"
        value
        "``"
    }

    "\n\n"
    "***"
    "\n\n"

    apply . access

    apply . tags-flags([
        'deprecated'
        'instance'
        'readonly'
        'global'
        'static'
        'inner'
    ])

    if (!mdox-string-empty(.tags[.type == 'alias'].name)) {
        "`Alias: {.tags[.type == 'alias'].name}` "
    }

    "\n\n"

    apply . description

    apply . example

    "\n\n"
}

/**
 * Function description
 */
match .comments[.matchCtx.type == 'func'] item-comment {

    context = (
        if (.matchCtx.context) {
            .matchCtx.context
        } else {
            ""
        }
    )

    context-sep = (
        if (!mdox-string-empty(context)) {
            " *"
            context
            if (.tags[.type == 'static']) {
                ":"
            } else {
                "."
            }
            "*"
        } else {
            ""
        }
    )

    name-type = (
        if (.tags[.type == 'constructs']) {
            "Constructor"

        } else if (.tags[.type == 'callback']) {
            "Callback"

        } else if (.tags[.type == 'func']) {
            "Function"

        } else if (.tags[.type == 'function'].name) {
            "Function"

        } else if (.tags[.type == 'method'].name) {
            "Method"

        } else if (.tags[.type == 'event' || .kind == 'event']) {
            "Event"

        } else if (.ctx[.type == 'method'].name) {
            "Method"

        } else if (.ctx[.type == 'function'].name) {
            "Function"

        } else {
            ""
        }
    )

    name = (
        if (.matchCtx.name) {
            .matchCtx.name

        } else {
            "Undefined"
        }
    )

    name-context = (
        " **{name}**"
    )

    types = (
        apply . mdox-tag-types ([
            'return'
            'returns'
        ])
    )

    args = (
        for (.tags[(.type == 'param' || .type == 'arg' || .type == 'argument') && .original == .name]) {
            if (index() != 0) {
                ", "
            }
            if (.optional) {
                "["
            }

            apply . mdox-tag-types-str
            " "
            .name

            if (.optional) {
                "]"
            }
        }
    )

    throws-description = (
        apply . type-description ([
            'throws'
            'exception'
        ])
    )

    return-description = (
        apply . type-description ([
            'return'
            'returns'
        ])
    )

    fires-description = (
        for (.tags[.type == 'fires' || .type == 'emits']) {
            if (index() != 0) {
                "\n"
            }

            " - "

            .description
        }
    )

    args-description = (
        apply . argument-description ([
            'param'
            'arg'
            'argument'
        ])
    )

    prop-description = (
        apply . argument-description ([
            'property'
        ])
    )


    "#### "
    if (.tags[.type == 'title'].description) {
        .tags[.type == 'title'].description

    } else {
        if (!mdox-string-empty(name-type)) {
            name-type
            ": "
        }

        name
    }

    "\n\n"

    context-sep
    name-context

    " ("

    args

    ")"

    " "
    types

    "\n\n"
    "***"
    "\n\n"

    apply . access

    apply . tags-flags([
        'deprecated'
        'instance'
        'global'
        'static'
        'inner'
    ])

    if (!mdox-string-empty(.tags[.type == 'alias'].name)) {
        "`Alias: {.tags[.type == 'alias'].name}` "
    }

    if (!mdox-string-empty(.tags[.type == 'this'].name)) {
        "`This: {.tags[.type == 'this'].name}` "
    }

    "\n\n"

    apply . description

    if (!mdox-string-empty(args-description)) {
        "\n\n"
        "*Arguments:*"
        "\n"
        args-description
    }

    if (!mdox-string-empty(prop-description)) {
        "\n\n"
        "*Propertys:*"
        "\n"
        prop-description
    }

    if (!mdox-string-empty(return-description)) {
        "\n\n"
        "*Returns:*"
        "\n"
        return-description
    }

    if (!mdox-string-empty(throws-description)) {
        "\n\n"
        "*Exceptions:*"
        "\n"
        throws-description
    }

    if (!mdox-string-empty(fires-description)) {
        "\n\n"
        "*Fires:*"
        "\n"
        fires-description
    }


    apply . example

    "\n\n"
}


/**
 * Class description
 */
match .comments[.matchCtx.type == 'class'] item-comment {

    name-type = (
        if (.tags[.type == 'class' || .kind == 'class']) {
            "Class"

        } else if (.tags[.type == 'constructor']) {
            "Class"

        } else if (.tags[.type == 'namespace' || .kind == 'namespace']) {
            "Namespace"

        } else if (.tags[.type == 'mixin' || .kind == 'mixin']) {
            "Mixin"

        } else if (.tags[.type == 'typedef' || .kind == 'typedef']) {
            "Type"

        } else if (.tags[.type == 'external' || .kind == 'external']) {
            "External"

        } else {
            ""
        }
    )

    name = (
        if (.matchCtx.name) {
            .matchCtx.name

        } else {
            "Undefined"
        }
    )


    types = (
        apply . mdox-tag-types ([
            'class'
            'constructor'
            'namespace'
            'typedef'
        ])
    )

    prop-description = (
        apply . argument-description ([
            'property'
        ])
    )

    throws-description = (
        apply . type-description ([
            'throws'
            'exception'
        ])
    )



    "### "
    if (.tags[.type == 'title'].description) {
        .tags[.type == 'title'].description

    } else {
        if (!mdox-string-empty(name-type)) {
            name-type
            ": "
        }

        name
    }

    "\n\n"
    "***"
    "\n\n"

    apply . access

    apply . tags-flags([
        'deprecated'
        'instance'
        'global'
        'static'
        'inner'
    ])

    if (types) {
        "\n\n"
        "**Type:** {types}"
    }


    "\n\n"

    apply . description

    if (!mdox-string-empty(prop-description)) {
        "\n\n"
        "*Propertys:*"
        "\n"
        prop-description
    }

    if (!mdox-string-empty(throws-description)) {
        "\n\n"
        "*Exceptions:*"
        "\n"
        throws-description
    }

    apply . example

    "\n\n"

    // augments
    // extends
    // mixes
}


/**
 * Module description
 */
match .comments[.matchCtx.type == 'module'] item-comment {

    types = (
        apply . mdox-tag-types ([
            'module'
        ])
    )

    name-type = (
        "Module"
    )

    name = (
        if (.matchCtx.name) {
            .matchCtx.name

        } else {
            "Undefined"
        }
    )

    throws-description = (
        apply . type-description ([
            'throws'
            'exception'
        ])
    )



    "## "
    if (.tags[.type == 'title'].description) {
        .tags[.type == 'title'].description

    } else {
        if (!mdox-string-empty(name-type)) {
            name-type
            ": "
        }

        name
    }

    "\n\n"

    apply . access

    apply . tags-flags([
        'deprecated'
        'instance'
        'global'
        'static'
        'inner'
    ])

    if (types) {
        "\n\n"
        "**Type:** {types}"
    }

    "\n\n"

    apply . description

    if (!mdox-string-empty(throws-description)) {
        "\n\n"
        "*Exceptions:*"
        "\n"
        throws-description
    }

    apply . example

    "\n\n"
}

